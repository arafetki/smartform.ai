// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: form_responses.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createResponsesForForm = `-- name: CreateResponsesForForm :exec
INSERT INTO core.form_responses (form_id, data)
VALUES ($1,$2)
`

type CreateResponsesForFormParams struct {
	FormID uuid.UUID       `json:"form_id"`
	Data   json.RawMessage `json:"data"`
}

func (q *Queries) CreateResponsesForForm(ctx context.Context, arg CreateResponsesForFormParams) error {
	_, err := q.db.Exec(ctx, createResponsesForForm, arg.FormID, arg.Data)
	return err
}

const listResponsesForForm = `-- name: ListResponsesForForm :many
SELECT id, form_id, data, created_at
FROM core.form_responses
WHERE form_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListResponsesForForm(ctx context.Context, formID uuid.UUID) ([]FormResponses, error) {
	rows, err := q.db.Query(ctx, listResponsesForForm, formID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FormResponses{}
	for rows.Next() {
		var i FormResponses
		if err := rows.Scan(
			&i.ID,
			&i.FormID,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
