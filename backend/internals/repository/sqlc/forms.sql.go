// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: forms.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createForm = `-- name: CreateForm :exec
INSERT INTO core.forms (user_id,settings_id,title,description,fields,published)
VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateFormParams struct {
	UserID      uuid.UUID
	SettingsID  int16
	Title       string
	Description pgtype.Text
	Fields      json.RawMessage
	Published   bool
}

func (q *Queries) CreateForm(ctx context.Context, arg CreateFormParams) error {
	_, err := q.db.Exec(ctx, createForm,
		arg.UserID,
		arg.SettingsID,
		arg.Title,
		arg.Description,
		arg.Fields,
		arg.Published,
	)
	return err
}

const deleteFormsByOwner = `-- name: DeleteFormsByOwner :execrows
DELETE FROM core.forms WHERE id=ANY($1) AND user_id=$2
`

type DeleteFormsByOwnerParams struct {
	Ids    []uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFormsByOwner(ctx context.Context, arg DeleteFormsByOwnerParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteFormsByOwner, arg.Ids, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getFormWithSettings = `-- name: GetFormWithSettings :one
SELECT
    f.id,
    f.user_id,
    f.title,
    f.description,
    f.fields,
    f.view_count,
    f.published,
    f.created_at,
    f.updated_at,
    s.id, s.background_color, s.foreground_color, s.primary_color, s.created_at
FROM core.forms as f
JOIN core.form_settings as s
ON f.settings_id = s.id
WHERE f.id = $1
`

type GetFormWithSettingsRow struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	Title        string
	Description  pgtype.Text
	Fields       json.RawMessage
	ViewCount    int64
	Published    bool
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	FormSettings FormSettings
}

func (q *Queries) GetFormWithSettings(ctx context.Context, id uuid.UUID) (GetFormWithSettingsRow, error) {
	row := q.db.QueryRow(ctx, getFormWithSettings, id)
	var i GetFormWithSettingsRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Fields,
		&i.ViewCount,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FormSettings.ID,
		&i.FormSettings.BackgroundColor,
		&i.FormSettings.ForegroundColor,
		&i.FormSettings.PrimaryColor,
		&i.FormSettings.CreatedAt,
	)
	return i, err
}

const listFormsForUser = `-- name: ListFormsForUser :many
SELECT
    id,
    user_id,
    settings_id,
    title,
    description,
    view_count,
    published,
    created_at,
    updated_at
FROM core.forms
WHERE user_id = $1
ORDER BY created_at DESC
`

type ListFormsForUserRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	SettingsID  int16
	Title       string
	Description pgtype.Text
	ViewCount   int64
	Published   bool
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

func (q *Queries) ListFormsForUser(ctx context.Context, userID uuid.UUID) ([]ListFormsForUserRow, error) {
	rows, err := q.db.Query(ctx, listFormsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListFormsForUserRow{}
	for rows.Next() {
		var i ListFormsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SettingsID,
			&i.Title,
			&i.Description,
			&i.ViewCount,
			&i.Published,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateForm = `-- name: UpdateForm :execrows
UPDATE core.forms
SET
    settings_id = COALESCE($1, settings_id),
    title = COALESCE($2, title),
    description = COALESCE($3, description),
    fields = COALESCE($4, fields),
    view_count = COALESCE($5, view_count),
    published = COALESCE($6, published)
WHERE id = $7 AND user_id=$8
`

type UpdateFormParams struct {
	SettingsID  pgtype.Int2
	Title       pgtype.Text
	Description pgtype.Text
	Fields      []byte
	ViewCount   pgtype.Int8
	Published   pgtype.Bool
	ID          uuid.UUID
	UserID      uuid.UUID
}

func (q *Queries) UpdateForm(ctx context.Context, arg UpdateFormParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateForm,
		arg.SettingsID,
		arg.Title,
		arg.Description,
		arg.Fields,
		arg.ViewCount,
		arg.Published,
		arg.ID,
		arg.UserID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
