// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: forms.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createForm = `-- name: CreateForm :exec
INSERT INTO forms (user_id,title,description,fields,is_published)
VALUES ($1,$2,$3,$4,$5)
`

type CreateFormParams struct {
	UserID      string          `json:"user_id"`
	Title       string          `json:"title"`
	Description pgtype.Text     `json:"description"`
	Fields      json.RawMessage `json:"fields"`
	IsPublished bool            `json:"is_published"`
}

func (q *Queries) CreateForm(ctx context.Context, arg CreateFormParams) error {
	_, err := q.db.Exec(ctx, createForm,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Fields,
		arg.IsPublished,
	)
	return err
}

const deleteForm = `-- name: DeleteForm :execrows
DELETE FROM forms WHERE id=$1
`

func (q *Queries) DeleteForm(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteForm, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllFormsForUser = `-- name: GetAllFormsForUser :many
SELECT
    id,
    user_id,
    title,
    description,
    fields,
    is_published,
    created_at,
    updated_at
FROM forms
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAllFormsForUser(ctx context.Context, userID string) ([]Form, error) {
	rows, err := q.db.Query(ctx, getAllFormsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Form{}
	for rows.Next() {
		var i Form
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Fields,
			&i.IsPublished,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getForm = `-- name: GetForm :one
SELECT
    id,
    user_id,
    title,
    description,
    fields,
    is_published,
    created_at,
    updated_at
FROM forms
WHERE id = $1
`

func (q *Queries) GetForm(ctx context.Context, id uuid.UUID) (Form, error) {
	row := q.db.QueryRow(ctx, getForm, id)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Fields,
		&i.IsPublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateForm = `-- name: UpdateForm :execrows
UPDATE forms
SET
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    fields = COALESCE($3, fields),
    is_published = COALESCE($4, is_published)
WHERE id = $5
`

type UpdateFormParams struct {
	Title       pgtype.Text `json:"title"`
	Description pgtype.Text `json:"description"`
	Fields      []byte      `json:"fields"`
	IsPublished pgtype.Bool `json:"is_published"`
	ID          uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateForm(ctx context.Context, arg UpdateFormParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateForm,
		arg.Title,
		arg.Description,
		arg.Fields,
		arg.IsPublished,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
