// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO core.users (id,avatar_url,is_verified,created_at) VALUES ($1,$2,$3,$4)
`

type CreateUserParams struct {
	ID         uuid.UUID          `json:"id"`
	AvatarUrl  pgtype.Text        `json:"avatar_url"`
	IsVerified bool               `json:"is_verified"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.AvatarUrl,
		arg.IsVerified,
		arg.CreatedAt,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM core.users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getUser = `-- name: GetUser :one
SELECT id, avatar_url, is_verified, created_at, updated_at FROM core.users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execrows
UPDATE core.users
SET
    avatar_url = COALESCE($1, avatar_url),
    is_verified = COALESCE($2, is_verified)
WHERE id = $3
`

type UpdateUserParams struct {
	AvatarUrl  pgtype.Text `json:"avatar_url"`
	IsVerified pgtype.Bool `json:"is_verified"`
	ID         uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUser, arg.AvatarUrl, arg.IsVerified, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
