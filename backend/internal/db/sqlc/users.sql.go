// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id,first_name,last_name,email,avatar_url,is_email_verified,created_at,updated_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
`

type CreateUserParams struct {
	ID              string             `json:"id"`
	FirstName       string             `json:"first_name"`
	LastName        pgtype.Text        `json:"last_name"`
	Email           string             `json:"email"`
	AvatarUrl       pgtype.Text        `json:"avatar_url"`
	IsEmailVerified bool               `json:"is_email_verified"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.AvatarUrl,
		arg.IsEmailVerified,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, avatar_url, is_email_verified, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AvatarUrl,
		&i.IsEmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execrows
UPDATE users
SET
    first_name = COALESCE($1, first_name),
    last_name = COALESCE($2, last_name),
    email = COALESCE($3, email),
    avatar_url = COALESCE($4, avatar_url),
    is_email_verified = COALESCE($5, is_email_verified)
WHERE id = $6
`

type UpdateUserParams struct {
	FirstName       pgtype.Text `json:"first_name"`
	LastName        pgtype.Text `json:"last_name"`
	Email           pgtype.Text `json:"email"`
	AvatarUrl       pgtype.Text `json:"avatar_url"`
	IsEmailVerified pgtype.Bool `json:"is_email_verified"`
	ID              string      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.AvatarUrl,
		arg.IsEmailVerified,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
