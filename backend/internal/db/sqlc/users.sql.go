// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT count(*) FROM core.users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO core.users (id,email,name,phone_number,is_verified,created_at,updated_at) VALUES ($1,$2,$3,$4,$5,$6,$7)
`

type CreateUserParams struct {
	ID          uuid.UUID          `json:"id"`
	Email       string             `json:"email"`
	Name        string             `json:"name"`
	PhoneNumber string             `json:"phone_number"`
	IsVerified  bool               `json:"is_verified"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.PhoneNumber,
		arg.IsVerified,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM core.users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getUser = `-- name: GetUser :one
SELECT id, email, name, phone_number, is_verified, avatar_url, created_at, updated_at FROM core.users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, name, phone_number, is_verified, avatar_url, created_at, updated_at FROM core.users
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.PhoneNumber,
			&i.IsVerified,
			&i.AvatarUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execrows
UPDATE core.users
SET
    email = COALESCE($1, email),
    name = COALESCE($2, name),
    phone_number = COALESCE($3, phone_number),
    is_verified = COALESCE($4, is_verified),
    avatar_url = COALESCE($5, avatar_url)
WHERE id = $6
`

type UpdateUserParams struct {
	Email       pgtype.Text `json:"email"`
	Name        pgtype.Text `json:"name"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	IsVerified  pgtype.Bool `json:"is_verified"`
	AvatarUrl   pgtype.Text `json:"avatar_url"`
	ID          uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.Name,
		arg.PhoneNumber,
		arg.IsVerified,
		arg.AvatarUrl,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
